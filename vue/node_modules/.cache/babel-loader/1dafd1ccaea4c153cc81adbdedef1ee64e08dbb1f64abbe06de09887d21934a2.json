{"ast":null,"code":"export default {\n  name: \"Notice\",\n  data() {\n    return {\n      tableData: [],\n      // 所有的数据\n      departmentList: [],\n      name: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }],\n        address: [{\n          required: true,\n          message: '请输入地址',\n          trigger: 'blur'\n        }]\n      },\n      ids: []\n    };\n  },\n  created() {\n    this.load();\n  },\n  methods: {\n    // node 就是department对象\n    handleNodeClick(node) {\n      console.log(node);\n      if (node.level > 2) {\n        this.$message.warning(\"父节点只能选择1级或2级部门\");\n        return;\n      }\n      this.$set(this.form, 'pid', node.id);\n      this.$refs.selectTree.blur();\n    },\n    handleAdd() {\n      // 新增数据\n      this.form = {}; // 新增数据的时候清空数据\n      this.fromVisible = true; // 打开弹窗\n    },\n    handleEdit(row) {\n      // 编辑数据\n      this.form = JSON.parse(JSON.stringify(row)); // 给form对象赋值  注意要深拷贝数据\n      this.fromVisible = true; // 打开弹窗\n    },\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/department/update' : '/department/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              this.$message.success('保存成功');\n              this.load();\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n    del(id) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/department/delete/' + id).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load();\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id); //  [1,2]\n    },\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/department/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load();\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load() {\n      this.$request.get('/department/selectTree').then(res => {\n        this.tableData = res.data || [];\n      });\n      this.$request.get('/department/selectAll').then(res => {\n        this.departmentList = res.data || [];\n      });\n    },\n    reset() {\n      this.name = null;\n      this.load(1);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","departmentList","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","address","ids","created","load","methods","handleNodeClick","node","console","log","level","$message","warning","$set","id","$refs","selectTree","blur","handleAdd","handleEdit","row","stringify","save","formRef","validate","valid","$request","url","method","then","res","code","success","error","msg","del","$confirm","type","response","delete","catch","handleSelectionChange","rows","map","v","delBatch","length","get","reset"],"sources":["src/views/manager/Department.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search\">\r\n      <el-input placeholder=\"请输入名称查询\" style=\"width: 200px\" v-model=\"name\"></el-input>\r\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">查询</el-button>\r\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\r\n    </div>\r\n\r\n    <div class=\"operation\">\r\n      <el-button type=\"primary\" plain @click=\"handleAdd\">新增</el-button>\r\n    </div>\r\n\r\n    <div class=\"table\">\r\n      <el-table row-key=\"id\" default-expand-all :data=\"tableData\" stripe @selection-change=\"handleSelectionChange\">\r\n        <el-table-column prop=\"id\" label=\"序号\" width=\"80\" align=\"center\" sortable></el-table-column>\r\n        <el-table-column prop=\"name\" label=\"名称\" show-overflow-tooltip></el-table-column>\r\n        <el-table-column prop=\"address\" label=\"地址\" show-overflow-tooltip></el-table-column>\r\n        <el-table-column prop=\"pid\" label=\"父级ID\"></el-table-column>\r\n        <el-table-column prop=\"level\" label=\"层级\"></el-table-column>\r\n\r\n        <el-table-column label=\"操作\" width=\"180\" align=\"center\">\r\n          <template v-slot=\"scope\">\r\n            <el-button plain type=\"primary\" @click=\"handleEdit(scope.row)\" size=\"mini\">编辑</el-button>\r\n            <el-button plain type=\"danger\" size=\"mini\" @click=del(scope.row.id)>删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n\r\n      <el-dialog title=\"信息\" :visible.sync=\"fromVisible\" width=\"40%\" :close-on-click-modal=\"false\" destroy-on-close>\r\n        <el-form label-width=\"100px\" style=\"padding-right: 50px\" :model=\"form\" :rules=\"rules\" ref=\"formRef\">\r\n          <el-form-item prop=\"title\" label=\"名称\">\r\n            <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item prop=\"address\" label=\"地址\">\r\n            <el-input type=\"textarea\" :rows=\"5\" v-model=\"form.address\" autocomplete=\"off\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"父级\" prop=\"pid\">\r\n            <el-select ref=\"selectTree\" v-model=\"form.pid\" clearable style=\"width: 100%;\">\r\n              <el-option\r\n                  v-for=\"(item, index) in departmentList\"\r\n                  :key=\"index\"\r\n                  :label=\"item.name\"\r\n                  :value=\"item.id\"\r\n                  style=\"display: none;\"/>\r\n\r\n              <el-tree\r\n                  :data=\"tableData\"\r\n                  :props=\"{children: 'children', label: 'name'}\"\r\n                  highlight-current\r\n                  @node-click=\"handleNodeClick\"\r\n                  default-expand-all />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item prop=\"level\" label=\"层级\">\r\n            <el-input v-model=\"form.level\" autocomplete=\"off\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <div slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"fromVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n        </div>\r\n      </el-dialog>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Notice\",\r\n  data() {\r\n    return {\r\n      tableData: [],  // 所有的数据\r\n      departmentList: [],\r\n      name: null,\r\n      fromVisible: false,\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        name: [\r\n          {required: true, message: '请输入名称', trigger: 'blur'},\r\n        ],\r\n        address: [\r\n          {required: true, message: '请输入地址', trigger: 'blur'},\r\n        ]\r\n      },\r\n      ids: []\r\n    }\r\n  },\r\n  created() {\r\n    this.load()\r\n  },\r\n  methods: {\r\n    // node 就是department对象\r\n    handleNodeClick(node) {\r\n      console.log(node)\r\n      if (node.level > 2) {\r\n        this.$message.warning(\"父节点只能选择1级或2级部门\")\r\n        return\r\n      }\r\n      this.$set(this.form, 'pid', node.id)\r\n      this.$refs.selectTree.blur()\r\n    },\r\n    handleAdd() {   // 新增数据\r\n      this.form = {}  // 新增数据的时候清空数据\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n    handleEdit(row) {   // 编辑数据\r\n      this.form = JSON.parse(JSON.stringify(row))  // 给form对象赋值  注意要深拷贝数据\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request({\r\n            url: this.form.id ? '/department/update' : '/department/add',\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // 表示成功保存\r\n              this.$message.success('保存成功')\r\n              this.load()\r\n              this.fromVisible = false\r\n            } else {\r\n              this.$message.error(res.msg)  // 弹出错误的信息\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    del(id) {   // 单个删除\r\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/department/delete/' + id).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load()\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    handleSelectionChange(rows) {   // 当前选中的所有的行数据\r\n      this.ids = rows.map(v => v.id)   //  [1,2]\r\n    },\r\n    delBatch() {   // 批量删除\r\n      if (!this.ids.length) {\r\n        this.$message.warning('请选择数据')\r\n        return\r\n      }\r\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/department/delete/batch', {data: this.ids}).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load()\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    load() {\r\n      this.$request.get('/department/selectTree').then(res => {\r\n        this.tableData = res.data || []\r\n      })\r\n\r\n      this.$request.get('/department/selectAll').then(res => {\r\n        this.departmentList = res.data || []\r\n      })\r\n    },\r\n    reset() {\r\n      this.name = null\r\n      this.load(1)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}